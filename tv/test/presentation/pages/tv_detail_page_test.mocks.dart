// Mocks generated by Mockito 5.1.0 from annotations
// in tv/test/presentation/pages/tv_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;
import 'dart:ui' as _i13;

import 'package:core/utils/state_enum.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/domain/entities/tv.dart' as _i11;
import 'package:tv/domain/entities/tv_detail.dart' as _i7;
import 'package:tv/domain/entities/tv_season_episode.dart' as _i15;
import 'package:tv/domain/usecases/get_tv_detail.dart' as _i2;
import 'package:tv/domain/usecases/get_tv_recommendations.dart' as _i3;
import 'package:tv/domain/usecases/get_tv_season_episodes.dart' as _i8;
import 'package:tv/domain/usecases/get_tv_watchlist_status.dart' as _i4;
import 'package:tv/domain/usecases/remove_watchlist_tv.dart' as _i6;
import 'package:tv/domain/usecases/save_watchlist_tv.dart' as _i5;
import 'package:tv/presentation/provider/tv_detail_notifier.dart' as _i9;
import 'package:tv/presentation/provider/tv_season_episodes_notifier.dart'
    as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetTvDetail_0 extends _i1.Fake implements _i2.GetTvDetail {}

class _FakeGetTvRecommendations_1 extends _i1.Fake
    implements _i3.GetTvRecommendations {}

class _FakeGetTvWatchlistStatus_2 extends _i1.Fake
    implements _i4.GetTvWatchlistStatus {}

class _FakeSaveWatchlistTv_3 extends _i1.Fake implements _i5.SaveWatchlistTv {}

class _FakeRemoveWatchlistTv_4 extends _i1.Fake
    implements _i6.RemoveWatchlistTv {}

class _FakeTvDetail_5 extends _i1.Fake implements _i7.TvDetail {}

class _FakeGetTvSeasonEpisodes_6 extends _i1.Fake
    implements _i8.GetTvSeasonEpisodes {}

/// A class which mocks [TvDetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailNotifier extends _i1.Mock implements _i9.TvDetailNotifier {
  MockTvDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvDetail get getTvDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvDetail),
          returnValue: _FakeGetTvDetail_0()) as _i2.GetTvDetail);
  @override
  _i3.GetTvRecommendations get getTvRecommendations => (super.noSuchMethod(
      Invocation.getter(#getTvRecommendations),
      returnValue: _FakeGetTvRecommendations_1()) as _i3.GetTvRecommendations);
  @override
  _i4.GetTvWatchlistStatus get getWatchListStatus => (super.noSuchMethod(
      Invocation.getter(#getWatchListStatus),
      returnValue: _FakeGetTvWatchlistStatus_2()) as _i4.GetTvWatchlistStatus);
  @override
  _i5.SaveWatchlistTv get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlistTv_3()) as _i5.SaveWatchlistTv);
  @override
  _i6.RemoveWatchlistTv get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlistTv_4()) as _i6.RemoveWatchlistTv);
  @override
  _i7.TvDetail get tv => (super.noSuchMethod(Invocation.getter(#tv),
      returnValue: _FakeTvDetail_5()) as _i7.TvDetail);
  @override
  _i10.RequestState get tvState =>
      (super.noSuchMethod(Invocation.getter(#tvState),
          returnValue: _i10.RequestState.empty) as _i10.RequestState);
  @override
  List<_i11.Tv> get recommendations =>
      (super.noSuchMethod(Invocation.getter(#recommendations),
          returnValue: <_i11.Tv>[]) as List<_i11.Tv>);
  @override
  _i10.RequestState get recommendationsState =>
      (super.noSuchMethod(Invocation.getter(#recommendationsState),
          returnValue: _i10.RequestState.empty) as _i10.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get isAddedToWatchlist =>
      (super.noSuchMethod(Invocation.getter(#isAddedToWatchlist),
          returnValue: false) as bool);
  @override
  String get watchlistMessage =>
      (super.noSuchMethod(Invocation.getter(#watchlistMessage), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchTvDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchTvDetail, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> addToWatchlist(_i7.TvDetail? tv) => (super.noSuchMethod(
      Invocation.method(#addToWatchlist, [tv]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> removeFromWatchlist(_i7.TvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [tv]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
      Invocation.method(#loadWatchlistStatus, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [TvSeasonEpisodesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeasonEpisodesNotifier extends _i1.Mock
    implements _i14.TvSeasonEpisodesNotifier {
  MockTvSeasonEpisodesNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetTvSeasonEpisodes get getTvSeasonEpisodes => (super.noSuchMethod(
      Invocation.getter(#getTvSeasonEpisodes),
      returnValue: _FakeGetTvSeasonEpisodes_6()) as _i8.GetTvSeasonEpisodes);
  @override
  List<_i15.TvSeasonEpisode> get seasonEpisodes =>
      (super.noSuchMethod(Invocation.getter(#seasonEpisodes),
          returnValue: <_i15.TvSeasonEpisode>[]) as List<_i15.TvSeasonEpisode>);
  @override
  _i10.RequestState get seasonEpisodesState =>
      (super.noSuchMethod(Invocation.getter(#seasonEpisodesState),
          returnValue: _i10.RequestState.empty) as _i10.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchTvSeasonEpisodes(int? id, int? seasonNumber) =>
      (super.noSuchMethod(
              Invocation.method(#fetchTvSeasonEpisodes, [id, seasonNumber]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
